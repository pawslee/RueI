{
  "README.html": {
    "href": "README.html",
    "title": "RueI | RueI",
    "summary": "RueI RueI is a hint framework, designed to be the definitive way to display multiple hints at once. you can get the latest release here. if you want to develop using RueI, make sure you install the nuget package RueI also has a website with documentation. Installation RueI is a LabAPI plugin, although it works with EXILED plugins, too. simply download the latest release, then put it in your plugin folder. RueI also requires Harmony 2.2.2 and above: you can download that here. Example RueDisplay display = RueDisplay.Get(player); Tag welcomeTag = new(); display.Show(welcomeTag, new BasicElement(800, \"Welcome to the server!\")); display.Show(new BasicElement(300, \"Don't forget to read the rules!\"), 10f); Timing.CallDelayed(5f, () => { display.Show(welcomeTag, new BasicElement(800, \"New update: We added support for multiple hints at once!\"), 10f); }); Features support for displaying multiple hints at once without them interfering with eachother allows using hint parameters extensions for StringBuilder that makes adding tags easier aspect ratio support extremely optimized and efficient RueI is not a grid-based or line-based system, it calculates the offset necessary to put a hint at the same position no matter what Comments if you've encountered any bugs please make an issue (it helps me out a ton)"
  },
  "api/RueI.API.Elements.BasicElement.html": {
    "href": "api/RueI.API.Elements.BasicElement.html",
    "title": "Class BasicElement | RueI",
    "summary": "Class BasicElement Namespace RueI.API.Elements Assembly RueI.dll Represents a basic element with fixed text. public class BasicElement : Element Inheritance object Element BasicElement Inherited Members Element.VerticalPosition Element.ResolutionBasedAlign Element.NoparseSettings Element.AnimatedPosition Element.VerticalAlign Element.ShowToSpectators Element.ZIndex Element.Parameters object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks The BasicElement is a simple element with fixed text. To update the text of a BasicElement, you can send the player a new BasicElement with the same Tag. Constructors BasicElement(float, string) Initializes a new instance of the BasicElement class. public BasicElement(float position, string content) Parameters position float The position of the element. content string The content of the element. Methods GetParsedData(ReferenceHub) Gets the ParsedData for this element. protected override sealed ParsedData GetParsedData(ReferenceHub hub) Parameters hub ReferenceHub The ReferenceHub to get the data for. Returns ParsedData The ParsedData of this Element, initially obtained through Parse(string, Element). Remarks The GetParsedData(ReferenceHub) method is called when a Display is updated and RueI combines every Element that belongs to it. Implementations for this method need not call Parse(string, Element) every time this method is called; instead, the ParsedData can be saved and reused."
  },
  "api/RueI.API.Elements.DynamicElement.html": {
    "href": "api/RueI.API.Elements.DynamicElement.html",
    "title": "Class DynamicElement | RueI",
    "summary": "Class DynamicElement Namespace RueI.API.Elements Assembly RueI.dll Represents an element that obtains its text from a supplied function and regenerates when a display is updated. public class DynamicElement : Element Inheritance object Element DynamicElement Inherited Members Element.VerticalPosition Element.ResolutionBasedAlign Element.NoparseSettings Element.AnimatedPosition Element.VerticalAlign Element.ShowToSpectators Element.ZIndex Element.Parameters object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors DynamicElement(float, Func<ReferenceHub, string>) Initializes a new instance of the DynamicElement class. public DynamicElement(float position, Func<ReferenceHub, string> contentGetter) Parameters position float The vertical position of the Element, from 0 to 1000. contentGetter Func<ReferenceHub, string> A Func<T, TResult> that takes in a ReferenceHub and returns a string to use for the content. DynamicElement(float, Func<string>) Initializes a new instance of the DynamicElement class. public DynamicElement(float position, Func<string> contentGetter) Parameters position float The vertical position of the Element, from 0 to 1000. contentGetter Func<string> A Func<TResult> that returns a string to use for the content. Properties ContentGetter Gets the Func<T, TResult> used to obtain data for this DynamicElement. protected Func<ReferenceHub, string> ContentGetter { get; } Property Value Func<ReferenceHub, string> UpdateInterval Gets or initializes an interval for how often a RueDisplay with this DynamicElement should be automatically updated, or null if the DynamicElement should not automatically update a RueDisplay. public TimeSpan? UpdateInterval { get; init; } Property Value TimeSpan? Methods GetParsedData(ReferenceHub) Gets the ParsedData for this element. protected override ParsedData GetParsedData(ReferenceHub hub) Parameters hub ReferenceHub The ReferenceHub to get the data for. Returns ParsedData The ParsedData of this Element, initially obtained through Parse(string, Element). Remarks The GetParsedData(ReferenceHub) method is called when a Display is updated and RueI combines every Element that belongs to it. Implementations for this method need not call Parse(string, Element) every time this method is called; instead, the ParsedData can be saved and reused."
  },
  "api/RueI.API.Elements.Element.html": {
    "href": "api/RueI.API.Elements.Element.html",
    "title": "Class Element | RueI",
    "summary": "Class Element Namespace RueI.API.Elements Assembly RueI.dll Represents text within a Display. public abstract class Element Inheritance object Element Derived BasicElement DynamicElement Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks Elements are how you show text to a player using RueI. You can create an instance of a class that derives from Element, such as BasicElement or DynamicElement, and show the text to a player. Constructors Element(float) Initializes a new instance of the Element class. public Element(float position) Parameters position float The vertical position of the Element, from 0 to 1000. Properties AnimatedPosition Gets or initializes an animated override for the vertical position. public AnimatedValue? AnimatedPosition { get; init; } Property Value AnimatedValue? Remarks If not null, VerticalPosition will be ignored. Currently, only one animated position per player is supported. NoparseSettings Gets or initializes the behavior of noparse tags in the Element. public NoparseSettings NoparseSettings { get; init; } Property Value NoparseSettings Remarks This allows for custom behavior when parsing certain values in the text of the Element. This prevents players from bypassing noparse and breaking hints. The default value is ParsesNone. It is recommended to keep this value as the default. Parameters Gets or initializes the parameters of the element. public IReadOnlyList<ContentParameter>? Parameters { get; init; } Property Value IReadOnlyList<ContentParameter> Remarks Setting this property through init (i.e. Parameters = [...]) creates a copy of the IReadOnlyList<T>. Thus, changes to the original IReadOnlyList<T> will not be reflected. ResolutionBasedAlign Gets or initializes a value indicating whether align tags will align to the very edge of the screen, based on the resolution. public bool ResolutionBasedAlign { get; init; } Property Value bool ShowToSpectators Gets or initializes a value indicating whether spectators should see this hint. public bool ShowToSpectators { get; init; } Property Value bool Remarks If a DynamicElement has this value set to true, the ContentGetter function will not be called with the spectated player if it the specator's Display is updated; instead, it will be called with the specator. VerticalAlign Gets or initializes the vertical alignment of the element. public VerticalAlign VerticalAlign { get; init; } Property Value VerticalAlign Remarks The default behavior is Down. VerticalPosition Gets the vertical position of the element, from 0 (the bottom of the screen) to 1000 (the top of the screen). public float VerticalPosition { get; } Property Value float ZIndex Gets or initializes the priority of the hint. A higher value indicates that the hint will show above another hint. public int ZIndex { get; init; } Property Value int Remarks The default ZIndex is 1. If two elements have the same ZIndex, the most recently added element will show above the other element. Methods GetParsedData(ReferenceHub) Gets the ParsedData for this element. protected abstract ParsedData GetParsedData(ReferenceHub hub) Parameters hub ReferenceHub The ReferenceHub to get the data for. Returns ParsedData The ParsedData of this Element, initially obtained through Parse(string, Element). Remarks The GetParsedData(ReferenceHub) method is called when a Display is updated and RueI combines every Element that belongs to it. Implementations for this method need not call Parse(string, Element) every time this method is called; instead, the ParsedData can be saved and reused."
  },
  "api/RueI.API.Elements.Enums.NoparseSettings.html": {
    "href": "api/RueI.API.Elements.Enums.NoparseSettings.html",
    "title": "Enum NoparseSettings | RueI",
    "summary": "Enum NoparseSettings Namespace RueI.API.Elements.Enums Assembly RueI.dll Defines the behavior of noparse tags in Element text. [Flags] public enum NoparseSettings Fields ParsesAll = -1 Noparse will parse all valid options. ParsesEscapeSequences = 1 Noparse will parse escape sequences, such as \\n. ParsesFormatItems = 2 Noparse will parse format items, such as {0}. ParsesNone = 0 Noparse will parse none of the options."
  },
  "api/RueI.API.Elements.Enums.VerticalAlign.html": {
    "href": "api/RueI.API.Elements.Enums.VerticalAlign.html",
    "title": "Enum VerticalAlign | RueI",
    "summary": "Enum VerticalAlign Namespace RueI.API.Elements.Enums Assembly RueI.dll Specifies how an element should be aligned vertically when there are multiple lines. public enum VerticalAlign Fields Center = 1 Positions the center of the text at the vertical position. This is the default behavior for Secret Lab hints. Down = 2 Positions the top of the first line to be at the vertical position. Subsequent lines will appear below it. Up = 0 Positions the bottom of the last line to be at the vertical position. The previous lines will appear above it."
  },
  "api/RueI.API.Elements.Enums.html": {
    "href": "api/RueI.API.Elements.Enums.html",
    "title": "Namespace RueI.API.Elements.Enums | RueI",
    "summary": "Namespace RueI.API.Elements.Enums Enums NoparseSettings Defines the behavior of noparse tags in Element text. VerticalAlign Specifies how an element should be aligned vertically when there are multiple lines."
  },
  "api/RueI.API.Elements.Parameters.AnimatedParameter.html": {
    "href": "api/RueI.API.Elements.Parameters.AnimatedParameter.html",
    "title": "Class AnimatedParameter | RueI",
    "summary": "Class AnimatedParameter Namespace RueI.API.Elements.Parameters Assembly RueI.dll Represents a parameter for a value that changes over time. public class AnimatedParameter : FormattableParameter Inheritance object ContentParameter FormattableParameter AnimatedParameter Inherited Members FormattableParameter.Format object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks This is the RueI equivalent of the base-game Hints.AnimationCurveHintParameter. Constructors AnimatedParameter(AnimatedValue) Initializes a new instance of the AnimatedParameter class. public AnimatedParameter(AnimatedValue value) Parameters value AnimatedValue The AnimatedValue to use. AnimatedParameter(AnimatedValue, bool) Initializes a new instance of the AnimatedParameter class with the option to round the value to an int. public AnimatedParameter(AnimatedValue value, bool roundToInt) Parameters value AnimatedValue The AnimatedValue to use. roundToInt bool Whether to round the value to an int. AnimatedParameter(AnimatedValue, string) Initializes a new instance of the AnimatedParameter class with a given format. public AnimatedParameter(AnimatedValue value, string format) Parameters value AnimatedValue The AnimatedValue to use. format string The format to use. Remarks Note that a format is not allowed if the AnimatedParameter is inside a line-height or size tag. AnimatedParameter(AnimatedValue, string, bool) Initializes a new instance of the AnimatedParameter class with a given format and the option to round the value to an int. public AnimatedParameter(AnimatedValue value, string format, bool roundToInt) Parameters value AnimatedValue The AnimatedValue to use. format string The format to use. roundToInt bool Whether to round the value to an int. Remarks Note that a format is not allowed and roundToInt must be false if the AnimatedParameter is inside a line-height or size tag. Setting roundToInt to true allows for formats that only work on ints, such as hexadecimal, to work. Properties Offset Gets the offset for the value. public double Offset { get; init; } Property Value double RoundToInt Gets a value indicating whether the float should be rounded to an int. public bool RoundToInt { get; } Property Value bool Value Gets the AnimatedValue for the AnimatedParameter. public AnimatedValue Value { get; } Property Value AnimatedValue"
  },
  "api/RueI.API.Elements.Parameters.AnimatedValue.html": {
    "href": "api/RueI.API.Elements.Parameters.AnimatedValue.html",
    "title": "Struct AnimatedValue | RueI",
    "summary": "Struct AnimatedValue Namespace RueI.API.Elements.Parameters Assembly RueI.dll Represents an animated value. public readonly struct AnimatedValue : IEnumerable<Keyframe>, IEnumerable Implements IEnumerable<Keyframe> IEnumerable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Remarks The AnimatedValue struct provides a way to represent an AnimationCurve while remaining read-only. Constructors AnimatedValue(AnimationCurve) Initializes a new instance of the AnimatedValue struct from an AnimationCurve. public AnimatedValue(AnimationCurve curve) Parameters curve AnimationCurve The AnimationCurve to use. AnimatedValue(params Keyframe[]) Initializes a new instance of the AnimatedValue struct from a Keyframe collection. public AnimatedValue(params Keyframe[] frames) Parameters frames Keyframe[] A Keyframe collection to use. AnimatedValue(IEnumerable<Keyframe>) Initializes a new instance of the AnimatedValue struct from an IEnumerable<T> of frames. public AnimatedValue(IEnumerable<Keyframe> frames) Parameters frames IEnumerable<Keyframe> An IEnumerable<T> to use. Methods GetEnumerator() Gets an IEnumerator<T> for the keyframes of this AnimatedValue. public IEnumerator<Keyframe> GetEnumerator() Returns IEnumerator<Keyframe> An IEnumerator<T> that can be used to enumerate over the keyframes of this AnimatedValue."
  },
  "api/RueI.API.Elements.Parameters.ContentParameter.html": {
    "href": "api/RueI.API.Elements.Parameters.ContentParameter.html",
    "title": "Class ContentParameter | RueI",
    "summary": "Class ContentParameter Namespace RueI.API.Elements.Parameters Assembly RueI.dll Represents a parameter for an Element. public abstract class ContentParameter Inheritance object ContentParameter Derived FormattableParameter ItemParameter Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks A ContentParameter allows customized values on the client-side, such as replacing a value with a keybind or changing a value over time. The parameters of an Element can be specified by setting the Parameters property when creating the Element. The corresponding format item (such as {0}) will then be replaced on the client with the parameter at that index in Parameters."
  },
  "api/RueI.API.Elements.Parameters.FormattableParameter.html": {
    "href": "api/RueI.API.Elements.Parameters.FormattableParameter.html",
    "title": "Class FormattableParameter | RueI",
    "summary": "Class FormattableParameter Namespace RueI.API.Elements.Parameters Assembly RueI.dll Represents a parameter that can be formatted. public abstract class FormattableParameter : ContentParameter Inheritance object ContentParameter FormattableParameter Derived AnimatedParameter KeybindParameter Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors FormattableParameter(string?) Initializes a new instance of the FormattableParameter class. public FormattableParameter(string? format) Parameters format string The format to use. Properties Format Gets the format used for the parameter. public string? Format { get; } Property Value string"
  },
  "api/RueI.API.Elements.Parameters.ItemParameter.html": {
    "href": "api/RueI.API.Elements.Parameters.ItemParameter.html",
    "title": "Class ItemParameter | RueI",
    "summary": "Class ItemParameter Namespace RueI.API.Elements.Parameters Assembly RueI.dll Represents a parameter that is replaced by the name of an item. public class ItemParameter : ContentParameter Inheritance object ContentParameter ItemParameter Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks This is the RueI equivalent of the base-game Hints.ItemHintParameter. Constructors ItemParameter(ItemType) Initializes a new instance of the ItemParameter class. public ItemParameter(ItemType itemType) Parameters itemType ItemType The ItemType of the item. Properties ItemType Gets the ItemType of the item. public ItemType ItemType { get; } Property Value ItemType"
  },
  "api/RueI.API.Elements.Parameters.KeybindParameter.html": {
    "href": "api/RueI.API.Elements.Parameters.KeybindParameter.html",
    "title": "Class KeybindParameter | RueI",
    "summary": "Class KeybindParameter Namespace RueI.API.Elements.Parameters Assembly RueI.dll Represents a parameter that is replaced with a keybind. public class KeybindParameter : FormattableParameter Inheritance object ContentParameter FormattableParameter KeybindParameter Inherited Members FormattableParameter.Format object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks This is the RueI equivalent of the base-game Hints.SSKeybindHintParameter. Constructors KeybindParameter(int, string) Initializes a new instance of the KeybindParameter class from an SS setting ID. public KeybindParameter(int id, string format = \"[{0}]\") Parameters id int The ID of the server-setting parameter. format string The format to use. Properties Id Gets the ID of the SS keybind setting. public int Id { get; } Property Value int"
  },
  "api/RueI.API.Elements.Parameters.html": {
    "href": "api/RueI.API.Elements.Parameters.html",
    "title": "Namespace RueI.API.Elements.Parameters | RueI",
    "summary": "Namespace RueI.API.Elements.Parameters Classes AnimatedParameter Represents a parameter for a value that changes over time. ContentParameter Represents a parameter for an Element. FormattableParameter Represents a parameter that can be formatted. ItemParameter Represents a parameter that is replaced by the name of an item. KeybindParameter Represents a parameter that is replaced with a keybind. Structs AnimatedValue Represents an animated value."
  },
  "api/RueI.API.Elements.Tag.html": {
    "href": "api/RueI.API.Elements.Tag.html",
    "title": "Class Tag | RueI",
    "summary": "Class Tag Namespace RueI.API.Elements Assembly RueI.dll Represents a unique identifier for an element within a RueDisplay. This class cannot be inherited. public sealed class Tag : IEquatable<Tag> Inheritance object Tag Implements IEquatable<Tag> Inherited Members object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Remarks A RueDisplay can only have one element with a specific Tag at a time. If two Tags are created with the same string, they are considered equal. You can use the Tag() constructor to create a tag that will only be equal to itself. Constructors Tag() Initializes a new instance of the Tag class. public Tag() Tag(string) Initializes a new instance of the Tag class with the given string as an ID. public Tag(string id) Parameters id string A string to use as an ID. Properties Id Gets the ID of this Tag, or null if this Tag was not created with an ID. public string? Id { get; } Property Value string Methods Equals(Tag?) Determines if this Tag is equivalent to another Tag. public bool Equals(Tag? other) Parameters other Tag A Tag to check for equality. Returns bool true if Tag is other or has the same Id; otherwise, false. Equals(object) Returns a value indicating whether this Tag is equal to an object. public override bool Equals(object obj) Parameters obj object An object to check for equality. Returns bool true if obj is a Tag and has the same Id, or if Tag is obj; otherwise, false. GetHashCode() Gets the hash code for this Tag. public override int GetHashCode() Returns int The hashcode. Remarks If this Tag has a Id, this will be calculated using that string. Operators operator ==(Tag, Tag) Checks two Tags to see if they are equal. public static bool operator ==(Tag first, Tag second) Parameters first Tag The first Tag to check. second Tag The second Tag to check. Returns bool true if both first and second refer to the same tag or both have the same Id; otherwise, false. operator !=(Tag, Tag) Checks two Tags to see if they are not equal. public static bool operator !=(Tag first, Tag second) Parameters first Tag The first Tag to check. second Tag The second Tag to check. Returns bool true if first and second do not refer to the same tag and have a different Id; otherwise, false."
  },
  "api/RueI.API.Elements.html": {
    "href": "api/RueI.API.Elements.html",
    "title": "Namespace RueI.API.Elements | RueI",
    "summary": "Namespace RueI.API.Elements Classes BasicElement Represents a basic element with fixed text. DynamicElement Represents an element that obtains its text from a supplied function and regenerates when a display is updated. Element Represents text within a Display. Tag Represents a unique identifier for an element within a RueDisplay. This class cannot be inherited."
  },
  "api/RueI.API.Parsing.ParsedData.html": {
    "href": "api/RueI.API.Parsing.ParsedData.html",
    "title": "Struct ParsedData | RueI",
    "summary": "Struct ParsedData Namespace RueI.API.Parsing Assembly RueI.dll Represents a parsed string, used for combining elements. public readonly struct ParsedData Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType()"
  },
  "api/RueI.API.Parsing.html": {
    "href": "api/RueI.API.Parsing.html",
    "title": "Namespace RueI.API.Parsing | RueI",
    "summary": "Namespace RueI.API.Parsing Structs ParsedData Represents a parsed string, used for combining elements."
  },
  "api/RueI.API.RueDisplay.html": {
    "href": "api/RueI.API.RueDisplay.html",
    "title": "Class RueDisplay | RueI",
    "summary": "Class RueDisplay Namespace RueI.API Assembly RueI.dll Represents a display for a specific player. public sealed class RueDisplay Inheritance object RueDisplay Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() Remarks Every player has a RueDisplay, which is used by RueI to keep track of their elements and send them hints. Methods Get(Player) Gets a display for a specific LabApi.Features.Wrappers.Player. public static RueDisplay Get(Player player) Parameters player Player The ReferenceHub to get the display of. Returns RueDisplay The player's corresponding display. Get(ReferenceHub) Gets a display for a specific ReferenceHub. public static RueDisplay Get(ReferenceHub hub) Parameters hub ReferenceHub The ReferenceHub to get the display of. Returns RueDisplay The player's corresponding display. Remove(Tag) Removes the element with the given tag from the RueDisplay, if there is one. public void Remove(Tag tag) Parameters tag Tag The tag for which remove the associated Element. SetVisible(Tag, bool) Sets the visibility of a Tag. public void SetVisible(Tag tag, bool isVisible) Parameters tag Tag The Tag to set the visibility of. isVisible bool Whether elements with the Tag should be visible. Remarks This method sets the visibility of any current or future elements with the Tag. Show(Element, float) Adds an Element to this RueDisplay for a certain duration. public void Show(Element element, float duration) Parameters element Element The Element to add. duration float The duration to show the element, in seconds. Remarks When adding an element using this method, it will not have a Tag. Therefore, there is no way to remove the element early. Show(Element, TimeSpan) Adds an Element to this RueDisplay for a certain duration. public void Show(Element element, TimeSpan duration) Parameters element Element The Element to add. duration TimeSpan A TimeSpan indicating how long to show the Element for. Remarks When adding an element using this method, it will not have a Tag. Therefore, there is no way to remove the element early. Show(Tag, Element) Adds an Element with a unique Tag to this RueDisplay. public void Show(Tag tag, Element element) Parameters tag Tag A Tag to use. If an Element already has this tag, it will be replaced. element Element The Element to add. Show(Tag, Element, float) Adds an Element with a unique Tag to this RueDisplay for a certain duration. public void Show(Tag tag, Element element, float duration) Parameters tag Tag A Tag to use. If an Element already has this tag, it will be replaced. element Element The Element to add. duration float The duration to show the element, in seconds. Show(Tag, Element, TimeSpan) Adds an Element with a unique Tag to this RueDisplay for a certain period of time. public void Show(Tag tag, Element element, TimeSpan duration) Parameters tag Tag A Tag to use. If an Element already has this tag, it will be replaced. element Element The Element to add. duration TimeSpan A TimeSpan indicating how long to show the Element for. Update() Updates the display, refreshing any DynamicElement. public void Update()"
  },
  "api/RueI.API.html": {
    "href": "api/RueI.API.html",
    "title": "Namespace RueI.API | RueI",
    "summary": "Namespace RueI.API Classes RueDisplay Represents a display for a specific player."
  },
  "api/RueI.Utils.Enums.AlignStyle.html": {
    "href": "api/RueI.Utils.Enums.AlignStyle.html",
    "title": "Enum AlignStyle | RueI",
    "summary": "Enum AlignStyle Namespace RueI.Utils.Enums Assembly RueI.dll Represents all of the options for the alignment of a string of text. public enum AlignStyle Fields Center = 2 Indicates that the text should be center-aligned. Flush = 5 Indicates that every line should be stretched to fill the display area, including the last line. Justified = 4 Indicates that every line should be stretched to fill the display area, excluding the last line. Left = 1 Indicates that the text should be left-aligned. Right = 3 Indicates that the text should be right-aligned."
  },
  "api/RueI.Utils.Enums.CaseStyle.html": {
    "href": "api/RueI.Utils.Enums.CaseStyle.html",
    "title": "Enum CaseStyle | RueI",
    "summary": "Enum CaseStyle Namespace RueI.Utils.Enums Assembly RueI.dll Represents the case style of text. public enum CaseStyle Fields Lowercase = 1 Indicates that all text will be in lowercase. Smallcaps = 0 Indicates that all text will be in uppercase, but lowercase characters will be slightly smaller. Uppercase = 2 Indicates that all text will be in uppercase."
  },
  "api/RueI.Utils.Enums.MarginDirection.html": {
    "href": "api/RueI.Utils.Enums.MarginDirection.html",
    "title": "Enum MarginDirection | RueI",
    "summary": "Enum MarginDirection Namespace RueI.Utils.Enums Assembly RueI.dll Represents the direction to add margins. public enum MarginDirection Fields Center = 1 The margins should be added on both the left and right. Left = 0 The margins should be added to the left. Right = 2 The margins should be added on the right."
  },
  "api/RueI.Utils.Enums.MeasurementUnit.html": {
    "href": "api/RueI.Utils.Enums.MeasurementUnit.html",
    "title": "Enum MeasurementUnit | RueI",
    "summary": "Enum MeasurementUnit Namespace RueI.Utils.Enums Assembly RueI.dll Represents the unit used for a measurement parameter. public enum MeasurementUnit Fields Ems = 2 Indicates that the measurement is in ems. An em in SCP:SL is equal to 34.7 pixels. Percentage = 1 Indicates that the measurement is a percentage of the default. Pixels = 0 Indicates that the measurement is in pixels."
  },
  "api/RueI.Utils.Enums.html": {
    "href": "api/RueI.Utils.Enums.html",
    "title": "Namespace RueI.Utils.Enums | RueI",
    "summary": "Namespace RueI.Utils.Enums Enums AlignStyle Represents all of the options for the alignment of a string of text. CaseStyle Represents the case style of text. MarginDirection Represents the direction to add margins. MeasurementUnit Represents the unit used for a measurement parameter."
  },
  "api/RueI.Utils.HintBuilding.html": {
    "href": "api/RueI.Utils.HintBuilding.html",
    "title": "Class HintBuilding | RueI",
    "summary": "Class HintBuilding Namespace RueI.Utils Assembly RueI.dll Provides extensions for adding rich text tags to StringBuilders. public static class HintBuilding Inheritance object HintBuilding Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Examples This example demonstrates simple usage of the HintBuilding methods. Note that you do not need a custom StringBuilder to use the methods. StringBuilder sb = new(); sb.SetColor(255, 0, 0); Methods AddLinebreak(StringBuilder) Adds a linebreak to a StringBuilder. public static StringBuilder AddLinebreak(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. AddSpace(StringBuilder, float, MeasurementUnit) Adds a space tag to a StringBuilder. public static StringBuilder AddSpace(this StringBuilder sb, float space, MeasurementUnit unit = MeasurementUnit.Pixels) Parameters sb StringBuilder The StringBuilder to use. space float The amount of space to add. unit MeasurementUnit The measurement unit of the pos tag. Returns StringBuilder A reference to the original StringBuilder. AddSprite(StringBuilder, int) Adds a sprite tag to a StringBuilder. public static StringBuilder AddSprite(this StringBuilder sb, int index) Parameters sb StringBuilder The StringBuilder to use. index int The index (0-20) of the sprite tag. Returns StringBuilder A reference to the original StringBuilder. AddSprite(StringBuilder, int, Color) Adds a sprite tag to a StringBuilder. public static StringBuilder AddSprite(this StringBuilder sb, int index, Color color) Parameters sb StringBuilder The StringBuilder to use. index int The index (0-20) of the sprite tag. color Color The color of the sprite tag. Returns StringBuilder A reference to the original StringBuilder. AppendPreservedLowercase(StringBuilder, string) Appends a string that has additional tags to preserve the true case of the string. public static StringBuilder AppendPreservedLowercase(this StringBuilder sb, string str) Parameters sb StringBuilder The StringBuilder to use. str string The string to add, with preserved case. the tags to. Returns StringBuilder The same string with additional tags that preserve casing. Remarks By default, lowercase text appear as smallcaps. This method ensures lowercase characters are truly lowercase. CloseAlign(StringBuilder) Adds a closing align tag to a StringBuilder. public static StringBuilder CloseAlign(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseAlpha(StringBuilder) Adds a closing alpha tag to a StringBuilder. public static StringBuilder CloseAlpha(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseBold(StringBuilder) Adds a closing bold tag to a StringBuilder. public static StringBuilder CloseBold(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseCase(StringBuilder, CaseStyle) Adds a closing case tag to a StringBuilder. public static StringBuilder CloseCase(this StringBuilder sb, CaseStyle caseStyle) Parameters sb StringBuilder The StringBuilder to use. caseStyle CaseStyle The case to close. Returns StringBuilder A reference to the original StringBuilder. CloseCharacterSpace(StringBuilder) Adds a closing cspace tag to a StringBuilder. public static StringBuilder CloseCharacterSpace(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseColor(StringBuilder) Adds a closing color tag to a StringBuilder. public static StringBuilder CloseColor(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseHorizontalPos(StringBuilder) Adds a closing pos tag to a StringBuilder. public static StringBuilder CloseHorizontalPos(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseIndent(StringBuilder) Adds a closing indent tag to a StringBuilder. public static StringBuilder CloseIndent(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseItalics(StringBuilder) Adds a closing italics tag to a StringBuilder. public static StringBuilder CloseItalics(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseLineHeight(StringBuilder) Adds a closing line-height tag to a StringBuilder. public static StringBuilder CloseLineHeight(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseMargins(StringBuilder) Adds a closing margins tag to a StringBuilder. public static StringBuilder CloseMargins(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseMark(StringBuilder) Adds a closing mark tag to a StringBuilder. public static StringBuilder CloseMark(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseMonospace(StringBuilder) Adds a closing monospace tag to a StringBuilder. public static StringBuilder CloseMonospace(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseNobreak(StringBuilder) Adds a closing nobreak tag to a StringBuilder. public static StringBuilder CloseNobreak(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseNoparse(StringBuilder) Adds a closing noparse tag to a StringBuilder. public static StringBuilder CloseNoparse(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseRotation(StringBuilder) Adds a closing rotation tag to a StringBuilder. public static StringBuilder CloseRotation(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseScale(StringBuilder) Adds a closing scale tag to a StringBuilder. public static StringBuilder CloseScale(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseSize(StringBuilder) Adds a closing size tag to a StringBuilder. public static StringBuilder CloseSize(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseStrikethrough(StringBuilder) Adds a closing strikethrough tag to a StringBuilder. public static StringBuilder CloseStrikethrough(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseSubscript(StringBuilder) Adds a closing subscript tag to a StringBuilder. public static StringBuilder CloseSubscript(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseSuperscript(StringBuilder) Adds a closing superscript tag to a StringBuilder. public static StringBuilder CloseSuperscript(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseUnderline(StringBuilder) Adds a closing underline tag to a StringBuilder. public static StringBuilder CloseUnderline(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseVOffset(StringBuilder) Adds a closing voffset tag to a StringBuilder. public static StringBuilder CloseVOffset(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseWidth(StringBuilder) Adds a closing width tag to a StringBuilder. public static StringBuilder CloseWidth(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. ConvertToHex(Color) Converts a Color to a hex code string. public static string ConvertToHex(Color color) Parameters color Color The Color to convert. Returns string The color as a hex code string. PreserveLowercase(string) Creates a string that has additional tags to preserve the true case of the string. public static string PreserveLowercase(string str) Parameters str string The string to add the tags to. Returns string The string with additional tags that preserve casing. Remarks By default, lowercase text appear as smallcaps. This method ensures lowercase characters are truly lowercase. If you are appending to an existing StringBuilder, use the AppendPreservedLowercase(StringBuilder, string) method, as it is faster. Sanitize(string) Sanitizes a string so that it has no tags by wrapping it in noparse and sanitizing any close noparses. public static string Sanitize(string str) Parameters str string The string to sanitize. Returns string The sanitized string with additional tags that preserve casing. Remarks By default, lowercase text appear as smallcaps. This method ensures lowercase characters are truly lowercase. If you are appending to an existing StringBuilder, use the AppendPreservedLowercase(StringBuilder, string) method, as it is faster. SetAlignment(StringBuilder, AlignStyle) Adds an alignment tag to a StringBuilder. public static StringBuilder SetAlignment(this StringBuilder sb, AlignStyle align) Parameters sb StringBuilder The StringBuilder to use. align AlignStyle The AlignStyle to use. Returns StringBuilder A reference to the original StringBuilder. SetAlpha(StringBuilder, int) Adds an alpha tag to a StringBuilder. public static StringBuilder SetAlpha(this StringBuilder sb, int alpha) Parameters sb StringBuilder The StringBuilder to use. alpha int The alpha (0-255). Returns StringBuilder A reference to the original StringBuilder. SetBold(StringBuilder) Adds a bold tag to a StringBuilder. public static StringBuilder SetBold(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. SetCase(StringBuilder, CaseStyle) Adds a case tag to a StringBuilder. public static StringBuilder SetCase(this StringBuilder sb, CaseStyle caseStyle) Parameters sb StringBuilder The StringBuilder to use. caseStyle CaseStyle The case to use. Returns StringBuilder A reference to the original StringBuilder. SetCharacterSpace(StringBuilder, float, MeasurementUnit) Adds a size tag to a StringBuilder. public static StringBuilder SetCharacterSpace(this StringBuilder sb, float size, MeasurementUnit unit = MeasurementUnit.Pixels) Parameters sb StringBuilder The StringBuilder to use. size float The size to include in the character spacing tag. unit MeasurementUnit The measurement unit of the character space tag. Returns StringBuilder A reference to the original StringBuilder. SetColor(StringBuilder, Color) Adds a color tag to a StringBuilder. public static StringBuilder SetColor(this StringBuilder sb, Color color) Parameters sb StringBuilder The StringBuilder to use. color Color The color to use. Returns StringBuilder A reference to the original StringBuilder. SetColor(StringBuilder, int, int, int, int) Adds a color tag to a StringBuilder from RGBA values. public static StringBuilder SetColor(this StringBuilder sb, int r, int g, int b, int a = 255) Parameters sb StringBuilder The StringBuilder to use. r int The red (0-255) of the color. g int The green (0-255) pf the color. b int The blue (0-255) of the color. a int The optional alpha (0-255) of the color. Returns StringBuilder A reference to the original StringBuilder. SetColor(StringBuilder, Color) Adds a color tag to a StringBuilder using a UnityEngine.Color. public static StringBuilder SetColor(this StringBuilder sb, UnityEngine.Color color) Parameters sb StringBuilder The StringBuilder to use. color Color The UnityEngine.Color to use. Returns StringBuilder A reference to the original StringBuilder. SetHorizontalPos(StringBuilder, float, MeasurementUnit) Adds a pos tag to a StringBuilder. public static StringBuilder SetHorizontalPos(this StringBuilder sb, float pos, MeasurementUnit unit = MeasurementUnit.Pixels) Parameters sb StringBuilder The StringBuilder to use. pos float The size of the pos tag. unit MeasurementUnit The measurement unit of the pos tag. Returns StringBuilder A reference to the original StringBuilder. SetIndent(StringBuilder, float, MeasurementUnit) Adds an indent tag to a StringBuilder. public static StringBuilder SetIndent(this StringBuilder sb, float indent, MeasurementUnit unit = MeasurementUnit.Pixels) Parameters sb StringBuilder The StringBuilder to use. indent float The indent size to include in the indent tag. unit MeasurementUnit The measurement unit of the indent tag. Returns StringBuilder A reference to the original StringBuilder. SetItalics(StringBuilder) Adds an italics tag to a StringBuilder. public static StringBuilder SetItalics(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. SetLineHeight(StringBuilder, float, MeasurementUnit) Adds a line-height tag to a StringBuilder. public static StringBuilder SetLineHeight(this StringBuilder sb, float size, MeasurementUnit unit = MeasurementUnit.Pixels) Parameters sb StringBuilder The StringBuilder to use. size float The line height to include in the line-height tag. unit MeasurementUnit The measurement unit of the line-height tag. Returns StringBuilder A reference to the original StringBuilder. SetMargins(StringBuilder, float, MarginDirection, MeasurementUnit) Adds an margins tag to a StringBuilder. public static StringBuilder SetMargins(this StringBuilder sb, float margins, MarginDirection direction, MeasurementUnit unit = MeasurementUnit.Pixels) Parameters sb StringBuilder The StringBuilder to use. margins float The size of the margins. direction MarginDirection The direction to add the margins. unit MeasurementUnit The measurement unit of the margins tag. Returns StringBuilder A reference to the original StringBuilder. SetMargins(StringBuilder, float, MeasurementUnit) Adds an margins tag to a StringBuilder. public static StringBuilder SetMargins(this StringBuilder sb, float margins, MeasurementUnit unit = MeasurementUnit.Pixels) Parameters sb StringBuilder The StringBuilder to use. margins float The size of the margins. unit MeasurementUnit The measurement unit of the margins tag. Returns StringBuilder A reference to the original StringBuilder. SetMark(StringBuilder, Color) Adds a mark tag to a StringBuilder. public static StringBuilder SetMark(this StringBuilder sb, Color color) Parameters sb StringBuilder The StringBuilder to use. color Color The color to use. Returns StringBuilder A reference to the original StringBuilder. SetMark(StringBuilder, int, int, int, int) Adds a mark tag to a StringBuilder from RGBA values. public static StringBuilder SetMark(this StringBuilder sb, int r, int g, int b, int a) Parameters sb StringBuilder The StringBuilder to use. r int The red (0-255) of the color. g int The green (0-255) of the color. b int The blue (0-255) of the color. a int The alpha (0-255) of the color. Returns StringBuilder A reference to the original StringBuilder. SetMark(StringBuilder, Color) Adds a mark tag to a StringBuilder using a UnityEngine.Color. public static StringBuilder SetMark(this StringBuilder sb, UnityEngine.Color color) Parameters sb StringBuilder The StringBuilder to use. color Color The UnityEngine.Color to use. Returns StringBuilder A reference to the original StringBuilder. SetMonospace(StringBuilder, float, MeasurementUnit) Adds a monospace tag to a StringBuilder. public static StringBuilder SetMonospace(this StringBuilder sb, float spacing, MeasurementUnit unit = MeasurementUnit.Pixels) Parameters sb StringBuilder The StringBuilder to use. spacing float The size of the spacing. unit MeasurementUnit The measurement unit of the monospacing tag. Returns StringBuilder A reference to the original StringBuilder. SetNobreak(StringBuilder) Adds a nobreak tag to a StringBuilder. public static StringBuilder SetNobreak(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. SetNoparse(StringBuilder) Adds a noparse tag to a StringBuilder. public static StringBuilder SetNoparse(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. SetRotation(StringBuilder, int) Adds a rotation tag to a StringBuilder. public static StringBuilder SetRotation(this StringBuilder sb, int rotation) Parameters sb StringBuilder The StringBuilder to use. rotation int The rotation (-180 to 180) of the tag. Returns StringBuilder A reference to the original StringBuilder. SetScale(StringBuilder, float) Adds a horizontal scale tag to a StringBuilder. public static StringBuilder SetScale(this StringBuilder sb, float scale) Parameters sb StringBuilder The StringBuilder to use. scale float The scale size to include in the scale tag. Returns StringBuilder A reference to the original StringBuilder. SetSize(StringBuilder, float, MeasurementUnit) Adds a size tag to a StringBuilder. public static StringBuilder SetSize(this StringBuilder sb, float size, MeasurementUnit unit = MeasurementUnit.Pixels) Parameters sb StringBuilder The StringBuilder to use. size float The size to include in the size tag. unit MeasurementUnit The measurement unit of the size tag. Returns StringBuilder A reference to the original StringBuilder. SetStrikethrough(StringBuilder) Adds a strikethrough tag to a StringBuilder. public static StringBuilder SetStrikethrough(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. SetSubscript(StringBuilder) Adds a subscript tag to a StringBuilder. public static StringBuilder SetSubscript(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. SetSuperscript(StringBuilder) Adds a superscript tag to a StringBuilder. public static StringBuilder SetSuperscript(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. SetUnderline(StringBuilder) Adds an underline tag to a StringBuilder. public static StringBuilder SetUnderline(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. SetVOffset(StringBuilder, float, MeasurementUnit) Adds a voffset tag to a StringBuilder. public static StringBuilder SetVOffset(this StringBuilder sb, float offset, MeasurementUnit unit = MeasurementUnit.Pixels) Parameters sb StringBuilder The StringBuilder to use. offset float The size of the voffset tag. unit MeasurementUnit The measurement unit of the voffset tag. Returns StringBuilder A reference to the original StringBuilder. SetWidth(StringBuilder, float, MeasurementUnit) Adds a width tag to a StringBuilder. public static StringBuilder SetWidth(this StringBuilder sb, float offset, MeasurementUnit unit = MeasurementUnit.Pixels) Parameters sb StringBuilder The StringBuilder to use. offset float The size of the new width. unit MeasurementUnit The measurement style of the width tag. Returns StringBuilder A reference to the original StringBuilder. UnityToSystemColor(Color) Converts a UnityEngine.Color to a system Color. public static Color UnityToSystemColor(UnityEngine.Color unityColor) Parameters unityColor Color The UnityEngine.Color to convert. Returns Color The converted Color."
  },
  "api/RueI.Utils.PositionUtils.html": {
    "href": "api/RueI.Utils.PositionUtils.html",
    "title": "Class PositionUtils | RueI",
    "summary": "Class PositionUtils Namespace RueI.Utils Assembly RueI.dll Provides utilities for working with Element positions. public class PositionUtils Inheritance object PositionUtils Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods BaselineToScaled(float) Converts a baseline position (offset from the baseline) to a scaled position (0-1000). public static float BaselineToScaled(float pos) Parameters pos float The baseline position to convert. Returns float The converted position. ScaledToBaseline(float) Converts a scaled position (0-1000) to a baseline position (offset from the baseline). public static float ScaledToBaseline(float pos) Parameters pos float The scaled position to convert. Returns float The converted position."
  },
  "api/RueI.Utils.html": {
    "href": "api/RueI.Utils.html",
    "title": "Namespace RueI.Utils | RueI",
    "summary": "Namespace RueI.Utils Classes HintBuilding Provides extensions for adding rich text tags to StringBuilders. PositionUtils Provides utilities for working with Element positions."
  },
  "index.html": {
    "href": "index.html",
    "title": "Introduction | RueI",
    "summary": "Introduction RueI is a hint framework for scp:sl. the primary component of RueI is the ability to display multiple hints at once, but it also provides a lot of other features to make working with hints easier and more effective. while RueI is a LabAPI plugin, it primarily acts as a dependency, and other plugin frameworks can use it, too."
  },
  "markdown/introduction.html": {
    "href": "markdown/introduction.html",
    "title": "Introduction | RueI",
    "summary": "Introduction welcome to RueI! right now, there aren't any markdown docs. eventually, they'll be added, along with more examples. :)"
  },
  "markdown/migrating-to-v3.html": {
    "href": "markdown/migrating-to-v3.html",
    "title": "Migrating to v3 | RueI",
    "summary": "Migrating to v3 This is a guide on how to migrate from RueI v2 to v3. Not all changes are documented; this is just a basic introduction of the various changes. Key Changes RueI is no longer a dependency. It is now a LabAPI plugin. EXILED plugins that rely on it should still work, but you need to put it in the LabAPI plugin folder still. Displays have been removed. DisplayCore has been renamed to RueDisplay, and functions very similar. After adding an element, you no longer need to update the RueDisplay. Elements are now read-only: after creating an element, you can't edit its text."
  }
}